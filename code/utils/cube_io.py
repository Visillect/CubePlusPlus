import json
import imageio
import numpy as np


def tiff16_load(fname):
    """load raw 16-bit (14-bit of information) image (tiff from dcraw)"""
    img = imageio.imread(fname)
    assert img.dtype == np.uint16, 'type {} of file {} is not np.uint16, is it raw image generated by dcraw?'.format(str(img.dtype), fname)
    return img


def png16_load(fname):
    """load raw 16-bit (14-bit of information) image """
    img = imageio.imread(fname, 'PNG-FI')
    assert img.dtype == np.uint16, 'type {} of file {} is not np.uint16, is it raw (debayered) image?'.format(str(img.dtype), fname)
    return img


def linearize(img, black_lvl=2048, saturation_lvl=2**14-1):
    """
    Args:
        img(np.array)
        black_lvl(int)
        saturation_lvl(int): 
            2**14-1 is a common value. 
            Not all images have the same value.
    """
    assert img.dtype == np.uint16
    img = img.astype(np.float64)
    return np.clip((img - black_lvl)/(saturation_lvl - black_lvl), 0, 1)


def png16_save(fname, img):
    """save png 16-bit image"""
    imageio.imsave(fname, img, 'PNG-FI') 
    # cv2.imwrite(fname, img) # may be faster


def jpg_load(fname): 
    img = imageio.imread(fname)
    assert img.dtype == 'uint8'
    return img


def jpg_save(fname, img): 
    imageio.imsave(fname, img)


def json_load(fname):
    with open(fname) as f:
        data = json.load(f)
    return data


def json_save(fname, data, indent_len=2):
    with open(fname, "w") as f:
        s = json.dumps(
            data, sort_keys=True, ensure_ascii=False, indent=" " * indent_len
        )
        f.write(s)